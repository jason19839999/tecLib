一.构建业务中台的基础--共享服务体系
     共享服务架构            → 中台战略的核心组成  摆脱“烟囱式”系统建设方式所带来的种种发展桎梏。

     SOA理念最核心的价值     → 松耦合的服务带来业务的复用，通过服务的编排助力业务的快速响应和创新。即：服务重用

     服务最不需要“业务稳定”  → 一个服务如果一味追求功能的不变，一定程度上就是故步自封，这样的做法是在逼着其他系统去建同样的“轮子”，时间长了这个服务就被遗忘和废弃了。
                               而服务所需的滋养正是来自新业务的不断进行服务的接入。

     共享服务真谛            → 开放  服务 滋养 稳定 数据   共享服务体系是培养业务创新的土壤

     BCP(Business Check Platform)  → 使用业务规则的方式，通过BCP平台对交易进行业务和逻辑上的校验，从而找出与业务不一致的的信息，提高用户体验和提升业务价值。

     赋予业务快速创新和试错能力    →  

     “去中心化”分布式服务构建：是互联网业务的特性决定的。用户群体是互联网公众 → 解决系统扩展性的问题，更快低进行业务响应、更好地支持业务创新等。
       ① “中心化”  ：对于不同技术接口的支持、数据格式转换、服务动态录用等功能。
            ESB方式：调用都要通过ESB服务总线进行路由和转换，即使做了集群和负载，如果高峰到来，如果某个应用出现问题，那么，其他负载肯定承载不了这么大冲击，一个个都会挂掉。这就是所谓的“雪崩”。

       ②“去中心化”：基于统一的技术接口标准、网络协议、规范进行交互，已使服务的交互效率最高，又因为是以服务契约先行的方式进行了服务接口功能的约定，在某种程度上很好地保证
	   了服务接口和稳定性，所以大大降低了因为服务接口发生变化给服务调用者带来的影响。同时“去中心化”服务框架中辅以多版本支持、负载均衡的支持。
           防止“雪崩”，最多也只是部分服务出现问题，就算出现问题时也更容易定位问题和故障恢复。


二.HSF服务框架(好舒服)  采用Netty + Hessian数据序列化协议实现服务交互

   Dia-mond服务器：主要承担了服务调用过程中对于服务调用安全管控的规则、服务路由权重、服务QPS阈值等配置规则的保存，所有的信息均是持久化保存到了后端的mysql服务器中。
     服务相关设置的典型场景如下：
        ①通过设置白名单（服务调用者所在服务节点IP地址）的方式设置某些服务或者服务中的方法只能让特定的IP地址的服务器调用；
	②通过用户认证的方式控制服务是否能调用；
	③按照不同的服务器权重设置服务调用者对多个服务提供者服务节点的访问；
	④设置某些服务的QPS能力上限值，一旦该服务的QPS达到该阈值，则拒绝继续调用，这也是实现服务限流的技术实现，在平台进行大促或者秒杀场景时，保障平台稳定性的重要屏障；
	⑤服务节点对配置服务器列表的获取；→ 第174页
        ⑥服务的注册发布；向配置服务器发送当前应用中包含的服务提供者相关信息。（这些信息均是从应用的配置文件中获取到的，服务的接口类全名、服务版本、所属服务组等信息，连同当前服务器的IP地址、
	     服务端口等信息进行注册发布，这个步骤在每一个服务提供的应用启动时都会自动执行，此时在配置服务器上就保存了。）
	⑦服务的订阅    ；当服务调用者应用启动时，同样在获取配置服务器列表后，就进行与配置服务器的交互，发送服务消费者相关信息（同样包含了服务的接口全名、服务版本，所属服务组）到配置服务器进行
	     服务的订阅，此时在配置服务器上通过“服务器接口全名 + 服务版本”作为匹配条件在当前配置服务器的内存中及逆行搜索，一旦获取到对应的服务注册信息，则将对应的服务提供者的服务器组IP地址及端口
	     返回服务调用者所在的应用节点上，此时也就完成了服务调用者端对于它所需要调用的服务提供者服务器列表信息，用于在服务真正交互时使用。
        ⑧服务规则的推送；
	⑨服务交互；

   Hessian是HSF框架中默认使用的数据序列化协议。 第【180】页

   Netty + Hessian 的组合在互联网高并发量的场景下，特别是在TPS上达到10w以上时，性能和效率远比REST或者Web Service高。

三.HSF框架的容错机制                            第【183】页
       在生产环境部署中一定会有多个应用实例作为服务提供者 【提供】 某一相同服务，基于之前提到的服务框架运行原理说明，在进行服务调用时，服务调用者端已经保存了他所
   需要调用的服务提供者的服务器列表信息，当采用随机方式获取其中一台进行服务交互时，不管是第一台服务器已经发生故障造成了服务请求无法响应，还是服务器已经收到服务
   请求，在进行服务请求处理过程中出现了服务故障（比如宕机，网络问题），造成该服务器没有在规定的时间（一般服务调用会设置到期时间）返回服务处理的结果，服务调用者
   端则获取到服务调用失败的反馈，会立即从剩下的服务提供者服务器列表信息中选择另一个服务器再次进行服务请求，这一次这个服务提供者实例正常提供了此服务的请求，从而
   保证了在个别服务提供者出现故障时，完全不会影响该服务正常提供服务。
       ※因为配置服务器是采用长连接的方式与服务节点进行网络通信，一旦发现有服务提供者实例出现故障，配置服务器在秒级就会感知到，此时会将出问题的这台服务提供者的信息
   从该服务的服务器列表中删除，并将更新后的服务器列表采用推送的方式同步给予该服务相关的所有服务调用者端，这样当下次服务调用者再进行此服务的调用时，就不会因为随
   机的方式再次对已经【停止服务提供】的服务器发起服务的调用。

四.HSF框架的线性扩展支持
   
























