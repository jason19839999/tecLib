微信分享内容追踪项目：

表设计部分：
	share_record      分享主体记录信息

	statistics_record 统计信息，比如按分享记录维度读取统计访客人数，访问次数等，供统计分析用。
						    
	visit_record      访问记录信息，记录访问者信息，比如：客户id，访问时间等等，详细分享记录读取这个表
			  把share_record表主体关键信息保存到访问记录（适当增加冗余字段）  比如,分享代理人id，分享业务类型等等。
			  由于对于share_record表的修改频率很小，考虑后续访问记录表的数据量会很大，所以，将一些关键信息冗余，
			  这样减少了查询关联表的数量，从而提高查询效率。

   总结几点数据库设计时平时注意的地方
	   1.不要使用自增主键，可能会影响后续分表；
	   2.添加字段的时候必须给default默认值；
	   3.适当增加冗余字段，减少联合查询表的数量；
	   4.适度设计字段类型。


不足的部分：
      【谁看过我】列表：这里面包含访客数，新增访问记录数等相关统计信息，这个作为二级页面，访问的频率相对较高，
      第一个版本上线之后出现查询缓慢的问题。此后在分享记录表增加org_share_id,将代理人分享的记录id保存在后续分享的记录中，这样每条记录都会带着他原来的share_id,
      统计的时候只需要查询出他所关联的share_id即可，所有相关统计数据就出来了，另外对索引进行的优化，在很大程度上提高了查询效率。


觉得改进的地方：
      后期随着数据量急剧增加，可能考虑异步处理访客相关信息，比如访客人数和访问次数。
      方案：
        第一步：从分享主体记录信息表扩展一个新表，作为主体返回数据信息。

        第二步：访客访问的时候，发送消息到消息队列，由消息队列异步处理，将相关访问客户数，访问次数等信息保存到扩展表。
	        由于一些需求逻辑和后续访问量很大的情况下，比如访客算一个微信客户。
		处理逻辑：1.把访问次数放到redis(prefix:share + share_id → value)  incrBy(key)
		          2.微信访客数，基于statistics_record表计算出来，如果是访客直接(custoer_id为0的话) +1，否则查询statistics_record，如果不存在 +1，否则不做处理。
                            (statistics_record数据处理原则：第一次访问插入一条，之后多次访问都是update,只更新访问次数和访客数。)
                
        第三步：读取这个扩展表，获取【谁看过我】列表相关信息（目前没有分页，后续采用分页查询，效率也会提高）。









                                                                              




