遇到疑问或者问题要追查到底，彻底掌握了。。。 -Dspring.profiles.active=dev
******************************************************************************
  ※※※特别注意的是，在install子module的时候，首先安装主module,也就是multi-module，再
     安装子module...解决问题参照地址：https://www.oschina.net/question/143808_156035 ※※※
  一.最重要的多module处理
  参照：https://github.com/jason19839999/spring-cloud/blob/master/practise/multi-module → multi-module
  第一步 → 先配置主pom.xml文件 把相关module加入进入 如下：
    <groupId>com.example</groupId>
    <artifactId>multi-module</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <modules>
        <module>multi-server</module>
        <module>multi-common</module>
    </modules>
    <packaging>pom</packaging>

    <name>multi-module</name>
    <description>Demo project for Spring Boot</description>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.0.2.RELEASE</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>

  第二步 → 再具体配置子module配置文件 如下：
    <parent>
        <artifactId>multi-module</artifactId>
        <groupId>com.example</groupId>
        <version>0.0.1-SNAPSHOT</version>
    </parent>
    <artifactId>multi-common</artifactId>

******************************************************************************

  ① IDEA 常用搜索快捷键   https://jingyan.baidu.com/article/29697b9163ac7dab20de3cbf.html
        添加jar包：File → ProjectStructure → Modules → 最右边 选 Dependencies → <Module source> → 点击最右边 "+" 即可添加 

  ② linux上 pom.xml 文件中的依赖存放目录 →  cd /root/.m2/repository/  spring boot 文件 →  /root/.m2/repository/
     org/springframework/boot

  ③ IDEA中右键里面没有Git选项处理方法 → File → Settings → Version Control 右边 <Project> VCS 选择Git即可。

  ④ IDEA 手动生成jar包  右键点击要打包的module(common) → 选择“Open Module Settings” → “Artifacts” → 点击中间区域的“+” JAR → 
    From modules with dependencies.. 
          选择要打包的module, 点击“OK”之后回添加了一个画面，在画面上做如下设置：
	      右边 Name = product-common:jar 
	      Type : JAR → Output directory : D:\tmp 指定生成jar包存放位置 → Available Elements 下面选择要打包的Module。
	  最后 “Build” → “Build Artifacts”
    参照项目：\spring cloud\spring-cloud\课程源代码\product\common

  ⑤ IDEA 引入第三方的包 在需要引入包的Module下面建立一个lib文件夹，将jar包拷贝到此处，然后“File” → “Project Structure” → “Modules” 
    右侧区域选择 “Dependencies” 点击 最右边“+” 
    添加刚才建立的lib文件下面的jar包即可。
    参照项目：\spring cloud\spring-cloud\课程源代码\order\server\lib

  ⑥ 引入maven 管理下的包的方法
        <!--这里注意一下，这里的引入是保存在本地maven目录下面-->
        <!--下面的依赖包groupId和artifactId就是依赖包所在项目里面的pom.xml文件里面的配置项 <groupId> 和 <artifactId>-->
        <!--<groupId>com.imooc</groupId>-->
        <!--<artifactId>product-client</artifactId>-->

        <!--<dependency>-->
            <!--<groupId>com.imooc</groupId>-->
            <!--<artifactId>product-client</artifactId>-->
        <!--</dependency>-->

  ⑦ shell教程 http://www.runoob.com/linux/linux-shell.html

  ⑧ 监控 pinpoint是开源在github上的一款APM监控工具，它是用Java编写的，用于大规模分布式系统监控。它对性能的影响最小（只增加约3％资源利用率），
    安装agent是无侵入式的，只需要在被测试的Tomcat中加上3句话，打下探针，就可以监控整套程序了。这篇Blog主要是想记录一下它安装的过程，
    方便日后查阅。


1.数据库字段这个Timestamp，实体要用Date. 要不然序列化失败。 注意：定义的实体类必须跟数据库一致
	
2.D:/timg.jpg 访问本地路径   读取文件
            //File filePic = new File("D:/timg.jpg");
            //FileInputStream is = new FileInputStream(filePic);
            //int i = is.available(); // 得到文件大小
            //byte data1[] = new byte[i];

3.写类实体文件注意： 要把文件建立在jpa扫描路径下面
entity
  mimingstock
  等等

要不然不能创建bin,运行会报错

4.查看异常
  有鼠标悬停到异常对象
  点开 + 号， 查看cause,里面有详细错误信息，很有用
  如果定位具体出错的代码行，要查看exception的stack message。

5.CrudRepository 更新/添加/删除时要加事物标签，否则会报错
 @Query(name = "updateConfirm", value = "update hk_bills set is_confirm = 1 where code = :code ", nativeQuery = true)
 @Modifying
 @Transactional
 jdbc多个数据源实现：参照项目 → com/juniorchina/zhichi/zcserving/db/dao/DataSourceConfig.java

 spring boot mysql 8小时连接超时 各种参数配置  https://blog.csdn.net/u013378306/article/details/78085366

6.右键 Local History 查看本地修改版本

7.查看字段注释  mysql yog 右键选择表 → 改变表 →再执行查询就有注释了

8.urlEncode 和urlDecode  必须在传参数的时候进行encode，防止特殊字符丢失，然后在服务端decode就可以了。

9.str.substring(start,end) 从0开始 end:不包含截取的部分，所以比如substring(1,6)，截取到6，但是截取的部分不包括第六位。

10.使用内置tomcat启动
启动方式：
①、IDEA中main函数启动 nohup java -cp . :./config/ :./lib/* -Dspring.profiles.active=test-2 
                      com.juniorchina.Application >> serving.log 2 > &1 &
                      注意：:./lib/*  是运行jar包

②、mvn springboot-run 命令 
③、java -jar XXX.jar

11.启动.sh和服务命令(命令参照实例：技术总结→服务被调用文件)
./hk_darkpool.sh start | stop | restart 或者
sh hk_darkpool.sh start | stop | restart

12.-D指定多个环境命令（参照Serving项目）
-Dspring.profiles.active=dev | product | test

13.统一处理总结
   ①ControllerAdvice   jsonp跨域问题解决（JsonpAdvice）/统一异常处理
   ②Aspect  doBefore   用户身份验证
   ③Filler  doFilter   跨域问题解决/版本过滤等等
      
14.同步容器： Vector类似List<>数组/Stack/HashTable，他们内部加了synchronized，所以必然会影响到执行性能。
   本身也不太安全，需要在处理这些时，进行额外的同步
   synchronized(Test.class){
        同步容器处理；
   }
 
15.非同步容器：List/Map/Set/Queue

16.并发容器：ConcurrentHashMap的锁分离技术
             若容器中有多把锁，每一把锁用于锁定容器其中一部分数据，那么当多线程访问容器里不同数据段的数据时，线程间就不会
	     存在锁竞争，
         从而可以有效提高并发访问效率，这就是ConcurrentHashMap所使用的锁分段技术，首先将数据分成一段一段的存储，然后给每
	 一段数据配一把锁，当一个线程占用锁并访问其中一个段数据的时候，其他段的数据也能被其他线程访问。

17.Java多线程实现的方式有四种
   concurrent 下面ExecutorService/Callable/FutureTask
   ①.继承Thread类，重写run方法
   ②.实现Runnable接口，重写run方法，实现Runnable接口的实现类的实例对象作为Thread构造函数的target
   ③.通过Callable和FutureTask创建线程 Callable/FutureTask   
         cancel取消任务
   ④.通过线程池创建线程ExecutorService.newFixedThreadPool/newCachedThreadPool/newSingleThreadPool
         shutdown()关闭线程

18.redis心得
    ① 适当考虑应用本机缓存，减少访问redis集群,提高效率


        
如下描述：对于分布式缓存，我们需要在Nginx+Lua应用中进行应用缓存来减少Redis集群的访问冲击；
        即首先查询应用本地缓存，如果命中则直接缓存，如果没有命中则接着查询Redis集群、回源到Tomcat；
        然后将数据缓存到应用本地。




    ② 当然本地缓存只针对热点数据、实时性非常高访问量相当大的数据场景

。

19.服务采用单独部署，所谓的隔离机制，如果一个服务不可用了，不影响其他服务使用，当然这种功能方式增加了运维成本，但是实现了高可用
。

20.jpa多表关联查询sql处理 https://blog.csdn.net/helloworld_dream/article/details/78913008

21. //concurrent包的线程安全Set，用来存放每个客户端对应的MyWebSocket对象。
    //CopyOnWriteArrayList适合使用在读操作远远大于写操作的场景里，比如缓存。发生修改时候做copy，新老版本分离，保证读的高性能，
    适用于以读为主的情况。
    //     *      对于CopyOnWriteArraySet<E>类： 
    //             *      1）它最适合于具有以下特征的应用程序：set 大小通常保持很小，只读操作远多于可变操作，需要在遍历期间防
    止线程间的冲突。  
    //             *      2）它是线程安全的, 底层的实现是CopyOnWriteArrayList；   
    //             *      3）因为通常需要复制整个基础数组，所以可变操作（add、set 和 remove 等等）的开销很大。  
    //             *      4）迭代器不支持可变 remove 操作。  
    //             *      5）使用迭代器进行遍历的速度很快，并且不会与其他线程发生冲突。在构造迭代器时，迭代器依赖于不变的数组快照。  
    //            ---------------------
    //    作者：学无止境qwer
    //    来源：CSDN
    //    原文：https://blog.csdn.net/u012956987/article/details/50811703
    //    版权声明：本文为博主原创文章，转载请附上博文链接！
    public static CopyOnWriteArraySet<WebSocketServer> webSocketSet = new CopyOnWriteArraySet<WebSocketServer>();
    参照代码：\crudreposity实现读写分离和Redis处理（经典）\crudreposity\src\main\java\datacenter\crudreposity\websocket\
    WebSocketServer.java

22.生产环境问题定位：
  ①.查看应用各项性能指标：CPU、内存、连接数（time_wait，一般最高也就5000左右，一旦超过3000会有慢的情况，要排查是否哪对其有影响）;
  ②.查看mysql各项性能指标：CPU、内存、连接、执行效率低的sql;
  ③.加监控日志，排查具体接口的执行时间；
  ④.基于当前架构，分析可能存在的系统瓶颈；
  ⑤.mysql 死锁问题，事务控制尽量放到mysql端，即放到存储过程里面，减少网络延迟和GC；
  ⑥.查看网络拓扑结构，尽量内网通信；
  ⑦.重要一个宗旨就是减少mysql的访问量；充分利用nosql和缓存服务，其次本地内存也需要考虑；
  ⑧.查看是否被其他业务访问影响，这个也是关键因素。

23.服务器端之间的通信：通过post请求实现，调用websocket所在服务端的接口，来达到通知其他负载上面客户端连接的目的。
 spring boot 
   ①实现 RestTemplate →→ ResponseEntity<StockResponse> response = restTemplate.exchange(uri, HttpMethod.POST,
   httpEntity, StockResponse.class);
   ②.通过HttpPost   → CloseableHttpClient httpClient = HttpClients.createDefault(); → reponse = httpClient.execute(httppost);

24.redis事务控制：multi   → begin transaction
                   exec   →  commit
                   discard →  rollback
    redis吞吐量指标：
	读取线程数量2 的吞吐量为 4.3/S 平均每个线程读取能力2.1W/S 负载1.0
	读取线程数量4（cpu内核2倍）的吞吐量为 5.6W/S 平均每个线程读取能力 1.4W/S 负载 1.85
	读取线程数量6 (cpu内核3倍) 的吞吐量为 6.3W/S 平均每个线程读取能力 1W/S 负载 2.73
	读取线程数量8 (cpu内核4倍) 的吞吐量为 6.7W/S 平均每个线程读取能力 8300/S 负载3.42
    redis多个实例 →  配置多个端口即可

25.CopyOnWriteArraySet：它最适合于具有以下特征的应用程序：set 大小通常保持很小，只读操作远多于可变操作，需要在遍历期间防止线程间的冲突。 
	它是线程安全的。 
	因为通常需要复制整个基础数组，所以可变操作（add、set 和 remove 等等）的开销很大。 
	迭代器不支持可变 remove 操作。 
	使用迭代器进行遍历的速度很快，并且不会与其他线程发生冲突。在构造迭代器时，迭代器依赖于不变的数组快照。 
	//迭代器
	Iterator iter = webSocketSet.iterator();
	while(iter.hasNext()) {
	 WebSocketServer item = (WebSocketServer)iter.next();
	try {
		item.sendMessage(message);
	} catch (IOException e) {
        e.printStackTrace();
	 }
	}

26.mongoDB架构：
   replica set 主、副本集，主如果挂了，  副本接替主继续工作
   master-slaver
   sharding

27.①.分布式是指将不同的业务分布在不同的地方。 而集群指的是将几台服务器集中在一起，实现同一业务。
   ②.简单说，分布式是以缩短单个任务的执行时间来提升效率的，而集群则是通过提高单位时间内执行的任务数来提升效率。

28.线程的使用
	wait notify notifyall  object类的方法
	wait方法，使当前线程暂停执行并释放对象锁标志，使其他线程进入syncronized数据区
	当前线程被放入对象等待池中。
	notify 将对象的等待池中取出任意一个线程放到锁标志等待池中，只有锁标志等待池中的
	线程能够获取到锁标志，如果锁标志等待池中没有线程，那么notify不起作用。

	sleep         yield        thread类的方法
	sleep和yield 都没有释放锁标志
	sleep 让不同优先级的线程执行 sleep()高优先级的，这样低优先级的就获得了执行机会
	yield 只能让出cpu占有权，只针对同优先级。找同等级的线程是否有可执行的
	Future是对于具体的Runnable或者Callable任务的执行结果进行取消、查询是否完成、获取结果的接口。必要时可以通过get方法获取执行结果，
	该方法会阻塞直到任务返回结果。

29.hbase特点：列和数据存放格式：byte[]
	列动态增加
	数据自动切分
	高并发读写
	不支持条件查询
	最多支持5个列簇，每个列簇支持百万个列，支持百亿行

30.spring boot 框架版本历史
	版本号               	发布时间	备注
	v0.5.0.M1	        2013-08-06	
	v1.0.0.RELEASE		2014-04-01	
	v1.2.0.RELEASE		2014-12-11	
	v1.3.0.RELEASE		2015-11-16	
	v1.4.0.RELEASE		2016-07-29	
	v1.5.0.RELEASE		2017-01-30	
	v2.0.0.M2	        2017-06-16	最新

31.rabbitMQ
    ①添加依赖  spring-boot-starter-amqp
    ②application.properties 添加配置 → spring.rabbitmq.publisher-confirms=true
				       spring.rabbitmq.publisher-returns=true
    ③
      @Autowired
      RabbitTemplate rabbitTemplate;

	//发送成功之后回调函数
	final RabbitTemplate.ConfirmCallback confirmCallback  = new RabbitTemplate.ConfirmCallback() {
	   @Override
	   public void confirm(CorrelationData correlationData, boolean ack, String s) {
		   if(ack){
		       //如果confirm返回成功，则进行更新表数据，更新状态为发送成功1；
	      }else{
		       //如果失败，则进行重试或者补偿等手段；目前用一个定时任务定时轮训发送状态为0的，重试3次，如果还不成功就改为2，
		       发送失败，人工干预了。
	      }
	   }
	};


	public void sendMiaoshaMessage(MiaoshaMessage mm) {
	    //
		  rabbitTemplate.setConfirmCalmCallback(confirmCallback);
	   String msg =  = RedisService.beanToString(ing(mm);
	      log.info("se("send message:"+msg);
		  rabbitTemplate.convertAndSendSend(nd(MQConfig.MIAOSHA_QUE_QUEUE, msg);
	}

32.JVM内存模型
   程序计数器      → 它的作用可以看做是当前线程所执行的字节码的行号指示器
   java虚拟机栈    → 为虚拟机执行Java方法（也就是字节码）服务
   本地方法栈      → 为虚拟机使用到的Native方法服务
   java堆          → 存放对象实例，几乎所有的对象实例都在这里分配内存
   方法区          → 与Java 堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码
   等数据

33.垃圾收集算法
   ①标记-清除算法
   ②复制算法
   ③标记-整理算法
   ④分代收集算法

34.内存分配与回收策略
   ①对象优先在Eden分配
   ⑤大对象直接进入老年代
   ③长期存活的对象将直接进入老年代
   ④动态对象年龄判定
   ⑤空间分配担保

35.① java sql Date转换成Time,只保留HH:mm:ss.然后根据需求比较大小
      java.sql.Time time = new java.sql.Time(tNew.getNews_time().getTime());
      String strTime= time.toString();
      SimpleDateFormat format = new SimpleDateFormat("HH:mm:ss");
      java.util.Date d = null;
      d = format.parse(strTime);   
      
   ② 日期时间计算，增加或者减少。。。
        Date publishHistoryTime = new Date();
        Calendar c = Calendar.getInstance();
        c.setTime(publishHistoryTime);
        c.add(Calendar.DAY_OF_MONTH, 1);
        Date tomorrow = c.getTime();

   ③ 字符串转Date:  SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                    String string = "2018-12-13 21:29:00";
                    Date date = sdf.parse(string)
   ④ Date转字符串
        Format f = new SimpleDateFormat("yyyy-MM-dd");
        String date = ((SimpleDateFormat) f).format(New Date());

   ⑤ 获取当前日期
        Calendar cal = Calendar.getInstance();
        String[] weekDays = {"星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"};
        Date d = new Date();
        cal.setTime(d);
        int w = cal.get(Calendar.DAY_OF_WEEK) - 1;
        return cal.get(cal.YEAR) + "年" + (cal.get(cal.MONTH) + 1) + "月" + cal.get(cal.DATE) + "日" + "(" + weekDays[w] + ")";

36.synchronize原理

37.gc原理

38.查看源码  Ctrl + N ，勾选上面的复选框，然后找到相应的类或者方法，然后再按回车，就进入到相应的类和方法了。
             Shift + Ctrl + N 查找文件   

39.查看当前代码执行情况 Debug → Evaluate Expression 右上角那个小方框
   比如输入：Thread.currentThread().getStackTrace() 推断当前线程执行了哪些操作。

40.学习跟踪源码 方法：直接ctrl + B 进入源码，可以debug跟踪即可。

41.在反序列化实体中，如果字段被赋值为null,那么就不返回这个字段了，通过如下配置：
	import com.fasterxml.jackson.databind.annotation.JsonSerialize;
	import java.io.Serializable;
	@JsonSerialize(include=JsonSerialize.Inclusion.NON_NULL)
	public class DepositListResponseData implements Serializable {

42.动态代理实现：AOP就是基于这个实现的：主要有InvocationHandler(invoke())接口和Proxy类
   \1-IdeaProjects\demo\src\main\java\com\example\demo\dynamic_proxy\DynamicProxy.java

43.微信小程序开发参照 → https://developers.weixin.qq.com/miniprogram/introduction/

44.msqlMysql按周，按月，按日，按小时分组统计数据 →  DATE_FORMAT函数  https://www.aliyun.com/jiaocheng/1129607.html
	 SELECT DATE_FORMAT(news_time,'%Y%m%d%H') hours,COUNT(1) COUNT FROM hot_news GROUP BY hours ORDER BY news_time
	 SELECT HOUR(e.time) as Hour,count(*) as Count FROM error_log e 
	    WHERE e.date = '2017-09-02' 
	    GROUP BY HOUR(e.time) ORDER BY Hour(e.time);

45.有时候要灵活运用，比如:ArrayList 和hashMap混合使用，以空间换时间。
   比如： int [] a = {1,2,3,4,5} 传入5，返回2个相加等于5的数组下标值：
   用循环效率就很低，配合hashMap就容易实现了。
   具体实现参照：datacenter/crudreposity/aapractise/arrays/ArrayListHashMap.java

46.rsyslog、logrotate切割保存日志日期不准确的问题
   具体参照：https://blog.csdn.net/a_tu_/article/details/73558006?utm_source=blogxgwz6

47.docker资料 → https://wiki.imooc.com/docker/helloworld.html

48.rabbitMQ 每秒消费的消息量，即吞吐量？

49.深入理解spring boot 注解原理？如何被识别并执行？

50.处理高并发千万记住，除了数据库行级锁，redis分布式锁，最好的使用消息队列，即排队处理。比如12306等高并发访问网站？

51.spring cloud遇到的几个坑？
   ① eureka-server 没有及时维护eureka-client端的状态，比如：client端下线了，没有及时剔除掉。
     目前就是把时间设置的短一些。
   ② eureka-client 拉取config-center的配置文件时报错，访问不了config-center,
     拉取地址为：host名称:端口，应该为ip:端口
     需要在eureka-client端增加配置项：
     eureka:
	  instance:
	    prefer-ip-address: true
   ③ properties.yml 改为 bootstrap.yml应用启动时要先执行这个，否则会报错。
     原理说明 →
	bootstrap.yml（bootstrap.properties）用来程序引导时执行，应用于更加早期配置信息读取，如可以使用来配置
	application.yml中使用到参数等;
	application.yml（application.properties) 应用程序特有配置信息，可以用来配置后续各个模块中需使用的公共参数等;
	bootstrap.yml 先于 application.yml 加载.
     使用场景 →
	当使用 Spring Cloud Config Server 的时候，你应该在 bootstrap.yml 里面指定 spring.application.name 和 
	  spring.cloud.config.server.git.uri和一些加密/解密的信息；
	技术上，bootstrap.yml 是被一个父级的 Spring ApplicationContext 加载的。这个父级的 Spring ApplicationContext
	  是先加载的，在加载application.yml 的 ApplicationContext之前。
	为何需要把 config server 的信息放在 bootstrap.yml 里？
	  当使用 Spring Cloud 的时候，配置信息一般是从 config server 加载的，为了取得配置信息（比如密码等），你需要一
	  些提早的或引导配置。因此，把 config server 信息放在 bootstrap.yml，用来加载真正需要的配置信息。

52.如何在高并发分布式系统中生成全局唯一Id
   https://blog.csdn.net/chenleixing/article/details/48153305

53.在aspect里面获取post请求的body参数，这里需要注意的是通过阿里的fastjson →  body = JSONObject.toJSONString(joinPoint.getArgs());
   参照代码： \myTools\SPRING BOOT & MYSQL\1-IdeaProjects\demo\src\main\java\com\example\demo\aspect\ServicelockAspect.java
   ※※※※※ 还要注意，要进入相关详细代码深入查看是否有相关属性，比如：传入参数  JoinPoint中就有getArgs()方法。 ※※※※※

54.如果打开项目dependencies都有报错，那么可能是parent包版本有问题。
   比如： <parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.0.4.RELEASE</version>
	 </parent>
	 2.0.4.RELEASE 这个版本可能有问题，那么可能改为 2.0.3.RELEASE就可以了。

55.服务端对请求参数校验： 利用Assert类库
    @RequestBusinessLog(name="产品对比筛选API",code = "productVsFilterAPI")
    @PostMapping("/price")
    public BaseResponse price(@RequestBody ProductPriceParam productPriceParam) {
        try {
            Assert.hasText(productPriceParam.getInsuredGender(), "性别为空");
            Assert.hasText(productPriceParam.getInsuredAge(), "年龄为空");
            Assert.hasText(productPriceParam.getAmount(), "保额为空");
            Assert.hasText(productPriceParam.getPayPeriod(), "缴费期间为空");
            ...
	    }

56.JWT 深入了解？

57.Oauther2.0平台统一用户身份验证和授权管理？

58.java Security权限认证实现？ 参照 → 慕课网ES搜索实践课程--后台管理系统的实现

59.springboot使用hibernate validator校验
    http://www.cnblogs.com/mr-yang-localhost/p/7812038.html
    http://docs.jboss.org/hibernate/validator/4.2/reference/zh-CN/html_single/#validator-gettingstarted
    上代码：
    @PostMapping("/updateProspectusStatus")
    public BaseResponse updateProspectusStatus(@RequestBody @Valid ProspectusUpdateInfoDto prospectusUpdateInfo,
    		BindingResult result, HttpServletRequest request) {

    	if (result.hasErrors()){
    		return new BaseResponse(400,result.getFieldError().getDefaultMessage());
    	}
    	try {

    		prospectusConfigService.updateProspectusStatus(prospectusUpdateInfo, request.getHeader("orgId").toString());

    	} catch(IllegalArgumentException e) {
    		e.printStackTrace();
    		return new BaseResponse(400,e.getMessage());
    	} catch (Exception e) {
    		e.printStackTrace();
    		return new BaseResponse(400,"系统异常，请联系系统管理员");
    	}
    	return new BaseResponse(200,"操作成功");
    }

     /**
       * 计划书信息
     */
    public class ProspectusUpdateInfoDto {
    //计划书数组
    @NotEmpty(message="计划书ID不能为空")
    private String[] prospectusIds;
    
    @NotEmpty(message="商户ID不能为空")
	private String orgId;
    }

60.生成业务主键或者唯一码
   参照代码：\src\apiserver\apiserver\src\main\java\com\lima\apiserver\common\IdGen\IdKeyWorkerConfiguration.java

61.  //String 转 JSONObject
     JSONObject jsonObject = JSON.parseObject(JSONObject.toJSONString(shareRecordVo.getShareParamJson()));
     添加依赖如下：
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
       		<version>1.2.47</version>
        </dependency>

62.bean注入问题：
   2019-03-14 10:39:36 [WARN] [org.apache.commons.logging.impl.Jdk14Logger:87] - Exception encountered during context 
   initialization - cancelling refresh attempt: 
   org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'openApiShareManager'
   : Unsatisfied dependency expressed through field 'iShareRecordService'; 
   nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name '
   shareRecordServiceImpl': 
   Unsatisfied dependency expressed through field 'shareRecordMapper'; 
   nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: 
   No qualifying bean of type 'com.lima.apiserver.shareCenter.dao.ShareRecordMapper' available: expected at least 1 bean
   which qualifies as autowire candidate. 
   Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)} 
   解决办法：将注入的类所在的包进行添加扫描即可。
	@SpringBootApplication
	@EnableFeignClients
	@MapperScan(basePackages={"com.lima.apiserver.currentCenter.dao","com.lima.apiserver.shareCenter.dao"})
	public class ApiserverApplication {

	    public static void main(String[] args) {
		SpringApplication.run(ApiserverApplication.class, args);
	    }
	}

63. 返回实体字段自定义返回格式  @JsonFormat(pattern = "yyyy-MM-dd HH:mm")
	public class CustomerInfoVo {
	    private String name;
	    
	    @JsonFormat(pattern = "yyyy-MM-dd HH:mm")
	    private Date visitDate;
	    private String headImgUrl;
	    private int visitTimes;
	    }

64.Object未知的对象实体，转化成json串，然后转换成JsonObject类型，就可以随意获取里面的值了。
            @Around(value = "@annotation(com.example.demo.aspect.MaiDaianRequest)")
	    public Object around(ProceedingJoinPoint joinPoint) throws InterruptedException {
		Object obj = null;
		try {
		    obj = joinPoint.proceed();
		    String json = JSONObject.toJSONString(obj);//将java对象转换为json对象
		    JSONObject jsonObject = JSONObject.parseObject(json);
		    JSONObject data = jsonObject.getJSONObject("data");
		    String total = data.getString("total");
		    total = "";
		} catch (Throwable e) {
		    e.printStackTrace();
		}
		return obj;
	    }

65.JSON.toJSONString(jdSmsDto)的时候要指定序列化顺序，否则可能和其他人对接的时候传参不一致。
        比如：JSON.toJSONString(jdSmsDto)是一个顺序，Post Body的时候又是一个顺序，这样可能导致不一致。
	举例说明：
	 //加签内容：body体（json字符串）+ unix时间戳（13位）+ 渠道ID + 盐（双方约定）。摘要放入请求头digest参数中
            String digest = Md5Encrypt.getMD5String(JSON.toJSONString(jdSmsDto) + timestamp + jdchannelId + jdSsalt);
            log.info("加密之前的报文： " + JSON.toJSONString(jdSmsDto) + timestamp + jdchannelId + jdSsalt);
            response = WebClient.create()
                    .post()
                    .uri(jdUrl)
                    .header(HttpHeaders.ACCEPT, MediaType.APPLICATION_JSON_VALUE)
                    .header(HttpHeaders.AUTHORIZATION, authorization)
                    .header("salt", jdSsalt)
                    .header("cid", cid)
                    .header("timestamp", timestamp)
                    .header("channelId", jdchannelId)
                    .header("digest", digest)
                    .syncBody(jdSmsDto)
                    .retrieve()
                    .bodyToMono(String.class);

	package com.lima.sms.entity;
	import com.alibaba.fastjson.annotation.JSONType;
	import lombok.Data;
	import java.util.List;
	@Data
	@JSONType(orders={"phone","smsId","param"})
	public class JdSmsDto {

	    private String phone;

	    private String smsId;

	    private List<String> param;

	}

66.服务设计的原则  服务的目的 稳定，快速
     产品方案
     技术方案
     错误处理  先写异常处理代码(如果错了，如何继续？)，再写核心逻辑代码
   ① 损失最小化
   ② 最大化持续运营的能力
   单元测试
   从外部的角度来审视自己

67.单条数据，返回字段名和value,设置返回值类型为Map即可  →  resultType="java.util.Map"
	 <select id="getDetail_100000" resultType="java.util.Map" parameterType="java.lang.String">
		select
		  pp.product_id         as productId,
		  pp.product_name       as productName,
		  oi.org_cname          as company,
		  pi.waiting_period     as waitingPeriod,
		  pi.insured_exm        as insuredExm,
		  pi.holder_exm         as holderExm,
		  pi.memo               as memo
		from prd_product pp
		  inner join prdcmp_illness pi on pi.prd_id = pp.product_id
		  left join org_info oi on oi.org_id = pp.product_brand_id
		where prd_id = #{productId,jdbcType=VARCHAR}
	    </select>

68.logback日志
   参照：F:/0-workspace/src/autumn-new/product-shop-autumn
         F:/0-workspace/src/apiserver/apiserver

69.创建索引
	ALTER TABLE用来创建普通索引、UNIQUE索引或PRIMARY KEY索引。
	ALTER TABLE table_name ADD INDEX index_name (column_list)
	ALTER TABLE table_name ADD UNIQUE (column_list)
	ALTER TABLE table_name ADD PRIMARY KEY (column_list)

70.spring-boot-starter-webflux  reactive 请求和返回参数处理
   参照：F:/0-workspace/src/lima-sms/lima-sms   →   public Mono<ServerResponse> sendMessage(ServerRequest request) {}

71.mysql中的字段类型为json时候，获取里面的具体json对象值，参照如下：
  JSON_UNQUOTE(JSON_EXTRACT( share_param, '$.productTitle' )) AS share_param,

72.各种工具类参照：F:/0-workspace/src/autumn-new/product-shop-autumn
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
        </dependency>
        <dependency>
            <groupId>commons-beanutils</groupId>
            <artifactId>commons-beanutils</artifactId>
            <version>1.9.3</version>
        </dependency>

73.linux上post请求(带参数的)
   time curl -H "Content-Type:application/json" -X POST --data '{"phoneNumbers":"18513871894","params":["测试1","测试2","测试3","测试4","测试5"],"orgId":"1057112830597791744","smsType":6}' http://rdtest.bj1.lima.com:10087/smsNew

74.任意指定打包名称 F:/0-workspace/src/fee-service/fee-service
        <build>
        <finalName>fee-service</finalName>
	   ....
	</build>

75.极客时间  → java性能调优日记
   ① 什么情况下调优，有哪些可优化的项？
   ② 手段是什么？










